<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.cos.common.repository.UserRepository">
    <resultMap type="org.cos.common.entity.data.po.User" id="UserResult">
        <result property="id" column="id" jdbcType="BIGINT"/>
        <result property="name" column="name" jdbcType="VARCHAR"/>
        <result property="passwd" column="passwd" jdbcType="VARCHAR"/>
        <result property="email" column="email" jdbcType="VARCHAR"/>
        <result property="walletAddress" column="wallet_address" jdbcType="VARCHAR"/>
        <result property="userType" column="user_type" jdbcType="TINYINT"/>
        <result property="status" column="status" jdbcType="TINYINT"/>
        <result property="userRelationId" column="user_relation_id" jdbcType="VARCHAR"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
        <result property="updateTime" column="update_time" jdbcType="TIMESTAMP"/>
        <result property="remark" column="remark" jdbcType="VARCHAR"/>
    </resultMap>
    <resultMap type="org.cos.common.entity.data.vo.WebStatisticalDataVo" id="WebStatisticalDataVoResult">
        <result property="web3Count" column="web3_count" jdbcType="BIGINT"/>
        <result property="web2Count" column="web2_count" jdbcType="BIGINT"/>
    </resultMap>

    <insert id="insertUser" useGeneratedKeys="true" keyProperty="id" parameterType="org.cos.common.entity.data.po.User">
        insert into user(name,passwd,email,wallet_address,user_type,user_relation_id,create_time,update_time,remark)
        values(#{name},#{passwd},#{email},#{walletAddress},#{userType},#{userRelationId},#{createTime},#{updateTime},#{remark})
    </insert>

    <select id="queryUserByEmail" resultMap="UserResult" parameterType="string">
        select
        id,name,passwd,email,wallet_address,user_type,user_relation_id,create_time,update_time
        from user
        where lower(email)=lower(#{email})
    </select>
    <select id="queryUserByWalletAddress" resultMap="UserResult" parameterType="string">
        select
        id,name,passwd,email,wallet_address,user_type,user_relation_id,create_time,update_time
        from user
        where lower(wallet_address)=lower(#{walletAddress})
    </select>
    <select id="queryUserByName" resultMap="UserResult" parameterType="string">
        select
        id,name,passwd,email,wallet_address,user_type,user_relation_id,create_time,update_time
        from user
        where name=#{name}
    </select>

    <select id="queryUserById" resultMap="UserResult" parameterType="Long">
        select
        id,name,passwd,email,wallet_address,user_type,user_relation_id,create_time,update_time
        from user
        where id=#{userId}
    </select>


    <select id="queryUserList" resultMap="UserResult" parameterType="int">
        select
        id,name,passwd,email,wallet_address,user_type,user_relation_id,create_time,update_time
        from user
        where user_type=#{userType}
    </select>

    <select id="queryUserByWalletAddressAndUserType" resultMap="UserResult">
        select
        id,name,passwd,email,wallet_address,user_type,user_relation_id,create_time,update_time
        from user
        where lower(wallet_address)=lower(#{walletAddress}) and user_type=#{userType}
    </select>
    <select id="queryUserByInviterId" resultMap="UserResult" parameterType="Integer">
        select
        id,name,passwd,email,wallet_address,inviter_id,create_time,update_time
        from user
        where inviter_id=#{inviterId}
    </select>

    <update id="updateUser">
        update user
        <set>
            <if test="name!=null and name!=''">name = #{name},</if>
            <if test="userType!=null and userType!= 0 ">user_type = #{userType},</if>
            <if test="status!=null and status!= 0 ">status = #{status},</if>
            <if test="passwd!=null and passwd!='' ">passwd = #{passwd},</if>
            <if test="email!=null and email!='' ">email = #{email},</if>
            <if test="walletAddress!=null and walletAddress!='' ">wallet_address = #{walletAddress},</if>
            <if test="updateTime!=null  ">update_time = #{updateTime},</if>
        </set>
        where id=#{id}
    </update>

    <select id="countWeb2AndWeb3User" resultMap="WebStatisticalDataVoResult">
        SELECT  SUM(CASE WHEN wallet_address is NOT NULL THEN 1 ELSE 0 END) as web3_count , SUM(CASE WHEN wallet_address IS null THEN 1 ELSE 0 END) as web2_count FROM user;

    </select>

    <insert id="insertSysUrBatch">
        insert into sys_ur(user_id,role_id,is_del)
        values
        <foreach collection="urList" item="ur" separator=",">
            (#{ur.userId},#{ur.roleId},#{ur.isDel})
        </foreach>
    </insert>

    <delete id="deleteSysUrBatch">
        delete from sys_ur
        WHERE user_id=#{userId}
        <!--and role_id IN
        <foreach collection="roleArray" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>-->
    </delete>

    <update id="updateSysUserDelStatus">
        update sys_user set is_del=1 where user_id=#{userId}
    </update>
    <update id="updateUserAccount">
        update sys_user set user_account=#{userAccount} where user_id=#{userId}
    </update>
</mapper>