<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.cos.common.repository.TransWebsiteRepository">
    <resultMap type="org.cos.common.entity.data.po.TransWebsite" id="TransWebsiteResult">
        <result property="id" column="id" jdbcType="BIGINT"/>
        <result property="txId" column="txid" jdbcType="VARCHAR"/>
        <result property="transType" column="trans_type" jdbcType="TINYINT"/>
        <result property="fromUserId" column="from_user_id" jdbcType="BIGINT"/>
        <result property="fromAssetType" column="from_asset_type" jdbcType="TINYINT"/>
        <result property="fromAmount" column="from_amount" jdbcType="DECIMAL"/>
        <result property="toUserId" column="to_user_id" jdbcType="BIGINT"/>
        <result property="toAssetType" column="to_asset_type" jdbcType="TINYINT"/>
        <result property="toAmount" column="to_amount" jdbcType="DECIMAL"/>
        <result property="nftTokenId" column="nft_token_id" jdbcType="VARCHAR"/>
        <result property="status" column="status" jdbcType="TINYINT"/>
        <result property="upchainTime" column="upchain_time" jdbcType="BIGINT"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
        <result property="updateTime" column="update_time" jdbcType="TIMESTAMP"/>
        <result property="remark" column="remark" jdbcType="VARCHAR"/>
    </resultMap>

    <insert id="insertTransWebsite" useGeneratedKeys="true" keyProperty="id" parameterType="org.cos.common.entity.data.po.TransWebsite">
        insert into trans_website(txid,trans_type,from_user_id,from_asset_type,from_amount,to_user_id,to_asset_type,to_amount,nft_token_id,create_time,update_time,remark)
        values(#{txId},#{transType},#{fromUserId},#{fromAssetType},#{fromAmount},#{toUserId},#{toAssetType},#{toAmount},#{nftTokenId},#{createTime},#{updateTime},#{remark})
    </insert>

    <select id="queryTransWebsiteByTxId" resultMap="TransWebsiteResult" parameterType="String">
        select
        *
        from trans_website
        where txid=#{txId}
    </select>

    <update id="updateTransWebsiteStatus">
        update trans_website
        <set>
            <if test="status!=null and status != 0 ">status = #{status},</if>
            <if test="upchainTime!=null and upchainTime!=0 ">upchain_time = #{upchainTime},</if>
        </set> where id=#{id}
    </update>



    <select id="queryUserByEmail" resultMap="TransWebsiteResult" parameterType="string">
        select
        id,name,passwd,email,wallet_address,user_type,user_relation_id,create_time,update_time
        from user
        where email=#{email}
    </select>
    <select id="queryUserByName" resultMap="TransWebsiteResult" parameterType="string">
        select
        id,name,passwd,email,wallet_address,user_type,user_relation_id,create_time,update_time
        from user
        where name=#{name}
    </select>

    <select id="queryUserById" resultMap="TransWebsiteResult" parameterType="Long">
        select
        id,name,passwd,email,wallet_address,user_type,user_relation_id,create_time,update_time
        from user
        where id=#{userId}
    </select>

    <select id="queryUserByWalletAddressAndUserType" resultMap="TransWebsiteResult">
        select
        id,name,passwd,email,wallet_address,user_type,user_relation_id,create_time,update_time
        from user
        where wallet_address=#{walletAddress} and user_type=#{userType}
    </select>
    <select id="queryUserByInviterId" resultMap="TransWebsiteResult" parameterType="Integer">
        select
        id,name,passwd,email,wallet_address,inviter_id,create_time,update_time
        from user
        where inviter_id=#{inviterId}
    </select>

    <update id="updateUser">
        update user
        <set>
            <if test="name!=null and name!=''">name = #{name},</if>
            <if test="passwd!=null and passwd!='' ">passwd = #{passwd},</if>
            <if test="email!=null and email!='' ">email = #{email},</if>
            <if test="walletAddress!=null and walletAddress!='' ">wallet_address = #{walletAddress},</if>
            <if test="updateTime!=null  ">update_time = #{updateTime},</if>
        </set>
        where user_id=#{userId}
    </update>

    <insert id="insertSysUrBatch">
        insert into sys_ur(user_id,role_id,is_del)
        values
        <foreach collection="urList" item="ur" separator=",">
            (#{ur.userId},#{ur.roleId},#{ur.isDel})
        </foreach>
    </insert>

    <delete id="deleteSysUrBatch">
        delete from sys_ur
        WHERE user_id=#{userId}
        <!--and role_id IN
        <foreach collection="roleArray" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>-->
    </delete>

    <update id="updateSysUserDelStatus">
        update sys_user set is_del=1 where user_id=#{userId}
    </update>
    <update id="updateUserAccount">
        update sys_user set user_account=#{userAccount} where user_id=#{userId}
    </update>
</mapper>